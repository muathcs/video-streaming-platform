generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// npx prisma migrate dev --name <migration_name>

// npx prisma migrate deploy
// npx prisma generate

model Celeb {
  celebid              String                   @id @default(uuid())
  displayname          String?                  @db.VarChar(60)
  username             String?                  @db.VarChar(20)
  followers            Int?
  account              String?                  @db.VarChar(30)
  category             String?                  @db.VarChar(20)
  price                Int?
  email                String?                  @db.VarChar(60)
  description          String?                  @db.VarChar(250)
  request_num          Int?                     @default(0)
  rating               Int?
  uid                  String?                  @unique @db.VarChar(42)
  imgurl               String?                  @db.VarChar(250)
  document_with_idx    Unsupported("tsvector")?
  reviews              Review[]
  cluster_id           Int?
  completed_onboarding Boolean                  @default(false)
  Approved             Boolean                  @default(false)
  MessageToUs          String?                  @db.VarChar(1200)
  MostPopularApp       String?                  @db.VarChar(30)

  inviteCode   InviteCode? @relation(fields: [inviteCodeId], references: [id])
  inviteCodeId String?     @unique

  @@index([document_with_idx], map: "document_idx", type: Gin)
  @@index([document_with_idx], map: "document_with_idx_index", type: Gin)
}

model InviteCode {
  id          String   @id @default(uuid())
  code        String   @unique @db.VarChar(100)
  is_used     Boolean? @default(false)
  celebId     String?  @unique
  information String?
  // celeb_id String   @id @default(uuid())
  Celeb       Celeb?
}

model Fan {
  fanid           String   @id @default(uuid())
  email           String?  @db.VarChar(100)
  displayname     String?  @db.VarChar(50)
  total_spent     Int?     @default(0)
  fav_categories  Int?
  num_of_requests Int?     @default(0)
  uid             String   @unique @db.VarChar(42)
  imgurl          String?  @db.VarChar(150)
  description     String?  @db.VarChar(350)
  created_at      DateTime @default(now()) // Default creation timestamp

  transactions Transaction[]
}

model Request {
  requestid     String    @id @default(uuid())
  celebuid      String?   @db.VarChar(50)
  fanuid        String?   @db.VarChar(50)
  isReviewed    Boolean   @default(false)
  price         Int?
  tosomeoneelse Boolean?
  reqaction     String?   @db.VarChar(16)
  fromperson    String?   @db.VarChar(40)
  toperson      String?   @db.VarChar(40)
  message       String?   @db.VarChar(500)
  reqstatus     String?   @db.VarChar(10)
  reqtype       String?   @db.VarChar(8)
  timestamp1    DateTime? @db.Timestamp(6)
  timestamp2    DateTime? @db.Timestamp(6)
  celebmessage  String?   @db.VarChar(1200)
}

model Review {
  reviewid      String   @id @default(uuid())
  reviewer_id   String   @db.VarChar(50)
  reviewed_id   String   @db.VarChar(50)
  message       String   @db.VarChar(350)
  requestId     String   @db.VarChar(50)
  event         String   @db.VarChar(20)
  reviewer_name String   @db.VarChar(40)
  Date          DateTime @default(now())
  celebCelebid  String?
  rating        Int
  celeb         Celeb?   @relation(fields: [celebCelebid], references: [celebid])
}

model Notification {
  notificationid String    @id @default(uuid())
  intended_uid   String?   @db.VarChar(50)
  sender_uid     String?   @db.VarChar(50)
  message        String?
  is_read        Boolean?  @default(false)
  created_at     DateTime? @default(now()) @db.Timestamp(6)
}

model Transaction {
  transactionid String    @id @default(uuid())
  payee_id      Int?
  buyer_id      Fan       @relation(fields: [transactionid], references: [fanid])
  amount        Int?
  status        String?   @db.VarChar(12)
  payment_date  DateTime? @db.Timestamp(6)
}
